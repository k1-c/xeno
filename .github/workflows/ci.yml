name: 🔧 CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 🧪 Test Job
  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: [stable, beta]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust-version }}
        components: rustfmt, clippy

    - name: 📦 Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust-version }}-
          ${{ runner.os }}-cargo-

    - name: 🧪 Run tests
      run: cargo test --workspace --verbose

    - name: 🧪 Run tests with all features
      run: cargo test --workspace --all-features --verbose

    - name: 🧪 Run doc tests
      run: cargo test --workspace --doc --verbose

  # 🎨 Format Check Job
  format:
    name: 🎨 Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt

    - name: 🎨 Check formatting
      run: cargo fmt --all -- --check

  # 📎 Clippy Lint Job
  clippy:
    name: 📎 Clippy Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: 📦 Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-clippy-
          ${{ runner.os }}-cargo-

    - name: 📎 Run clippy
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  # 🏗️ Build Job
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: 📦 Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-${{ matrix.target }}-
          ${{ runner.os }}-cargo-build-
          ${{ runner.os }}-cargo-

    - name: 🏗️ Build workspace
      run: cargo build --workspace --verbose

    - name: 🏗️ Build workspace (release)
      run: cargo build --workspace --release --verbose

    - name: 🏗️ Build examples
      run: |
        cargo build --package hello-hyper --verbose
        cargo build --package hello-hyper --release --verbose

  # 🔍 Security Audit Job
  audit:
    name: 🔍 Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: 🔍 Install cargo-audit
      run: |
        cargo install --locked cargo-audit || cargo install cargo-audit

    - name: 🔍 Run security audit
      run: cargo audit

  # 📊 Coverage Job (Optional)
  coverage:
    name: 📊 Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: 📦 Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-coverage-
          ${{ runner.os }}-cargo-

    - name: 📊 Install cargo-llvm-cov
      run: |
        cargo install --locked cargo-llvm-cov || cargo install cargo-llvm-cov

    - name: 📊 Generate coverage report
      run: cargo llvm-cov --workspace --lcov --output-path lcov.info

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: lcov.info
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  # ✅ Check Job (Summary)
  check:
    name: ✅ All Checks Passed
    runs-on: ubuntu-latest
    needs: [test, format, clippy, build, audit]
    if: always()
    
    steps:
    - name: ✅ Check all jobs status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && \
              "${{ needs.format.result }}" == "success" && \
              "${{ needs.clippy.result }}" == "success" && \
              "${{ needs.build.result }}" == "success" && \
              "${{ needs.audit.result }}" == "success" ]]; then
          echo "✅ All checks passed successfully!"
          exit 0
        else
          echo "❌ Some checks failed:"
          echo "  Test: ${{ needs.test.result }}"
          echo "  Format: ${{ needs.format.result }}"
          echo "  Clippy: ${{ needs.clippy.result }}"
          echo "  Build: ${{ needs.build.result }}"
          echo "  Audit: ${{ needs.audit.result }}"
          exit 1
        fi
